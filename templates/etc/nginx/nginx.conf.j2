worker_processes {{ nginx_workers }};
error_log  {{ nginx_error_log }};

events {
    worker_connections {{ nginx_connections }};
    use epoll;
}

http {
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    include  mime.types;

    default_type  application/octet-stream;
    sendfile  on;
    keepalive_timeout {{ nginx_keepalive_timeout }};
    keepalive_requests {{ nginx_keepalive_requests }};
    reset_timedout_connection on;

    proxy_buffering on;
    proxy_buffers 8 4m;
    proxy_buffer_size 4m;

    gzip on;
    gzip_comp_level 2;
    gzip_min_length 1k;

    tcp_nodelay on;
    tcp_nopush on;

    log_format  main '$remote_addr - [$time_local] ($request_time) $status '
    '"$request" $request_length $body_bytes_sent '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  {{ nginx_access_log }}  main;

    include {{ nginx_conf_path }}sites-enabled/*;

    # PROMETHEUS METRIC
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "{{ nginx_conf_path }}plugins/prometheus.lua";
    init_by_lua '
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status", "role"})
        metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host", "role"})
    ';
    log_by_lua '
        local host = ngx.var.host:gsub("^www.", "")
        local role = "{{ prometheus_metric_role }}"
        metric_requests:inc(1, {host, ngx.var.status, role})
        metric_latency:observe(ngx.now() - ngx.req.start_time(), {host, role})
        ';
}
